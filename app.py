import streamlit as st
import pandas as pd
import random
from sklearn.metrics.pairwise import cosine_similarity

# Biblioteca para abas
from streamlit_option_menu import option_menu

# =================== Configura√ß√£o de dados ===================
# Base de v√≠deos para recomenda√ß√£o colaborativa
videos = [
    {"id": "kpOqKoEs1Ds", "title": "10 + Ideias de DIY: Transformando Lixo em Luxo, Artesanato e Reciclagem para 2023", "category": "Decora√ß√£o"},
    {"id": "KO3tGFHUOKs", "title": "16 IDEIAS DE ARTESANATOS INCR√çVEIS DE RECICLAGEM PARA NATAL", "category": "Decora√ß√£o"},
    {"id": "fGVk-1NC_pQ", "title": "12 TRUQUES DE RECICLAGEM ABSOLUTAMENTE GENIAIS", "category": "Utilit√°rio"},
    {"id": "90rKz93kA-E", "title": "DIY - IDEIA COM GARRAFA PET / PARA JARDIM", "category": "Jardinagem"},
    {"id": "w5FebJwI4i8", "title": "DIY - IDEIA COM GARRAFA PET / PARA JARDIM #2", "category": "Jardinagem"},
    {"id": "oMq7yB-FkF8", "title": "Casa de Passarinhoüê¶ feita com garrafa pet e Potes", "category": "Utilit√°rio"},
  
]

# Tamanho do player
player_width = 450
player_height = 200




# Base adicional de v√≠deos para filtragem por conte√∫do
additional_videos = [
    {"id": "7EYglzpo70Q", "title": "10 IDEIAS DE RECICLAGEM ABSOLUTAMENTE GENIAIS COM PL√ÅSTICO", "category": "Utilit√°rio"},
    {"id": "BLve3TAqWi0", "title": "Diy Decora√ß√£o Natalina - Mini Arvore de Natal Artesanal", "category": "Decora√ß√£o"},
    {"id": "2dcjlFhA_jw", "title": "ELEFANTE feito com Embalagem (garrafa) de Amaciante", "category": "Decora√ß√£o"},
    {"id": "v0aplXQxGFw", "title": "DIY - VASO ELEFANTE feito com vidro de AMACIANTE", "category": "Jardinagem"},

]

st.markdown(
    """
    <style>
    .small-title {
        font-size: 16px; /* Reduz o tamanho do t√≠tulo */
        font-weight: bold;
        margin-top: 5px;
        margin-bottom: 5px;
    }
    .small-button {
        font-size: 150px; /* Reduz o tamanho do texto do bot√£o */
        padding: 0px 0px; /* Ajusta o espa√ßamento interno do bot√£o */
    }
    </style>
    """,
    unsafe_allow_html=True,
)

player_width_recommendation = 30  # Largura menor
player_height_recommendation = 600  # Altura menor
# Estilo CSS para t√≠tulos e layout reduzidos
st.markdown(
    """
    <style>
    .recommendation-title {
        font-size: 20px; /* Tamanho menor para t√≠tulos */
        font-weight: bold;
        margin-top: 5px;
        margin-bottom: 5px;
    }
    .video-frame {
        width: 100%; /* Ajusta a largura para 100% do cont√™iner */
        max-width: 500px; /* Limita a largura m√°xima */
        height: auto; /* Mant√©m a propor√ß√£o */
    }
    </style>
    """,
    unsafe_allow_html=True,
)
# Base de projetos DIY (fa√ßa-voc√™-mesmo)
projects = [
    {"project": "Vaso de Planta com Garrafa PET", "materials": {"garrafa PET": 1}},
    {"project": "Organizador de Mesa com Caixa de Sapato", "materials": {"caixa de sapato": 1, "papel decorativo": 2}},
    {"project": "Cofrinho com Garrafa PET", "materials": {"garrafa PET": 2, "tampa pl√°stica": 1}},
    {"project": "Porta-Treco com Latas de Alum√≠nio", "materials": {"lata de alum√≠nio": 3, "tinta spray": 1}},
    {"project": "Abajur com Palitos de Sorvete", "materials": {"palitos de sorvete": 30, "cola quente": 1}},
]

# Dados simulados de avalia√ß√µes de outros usu√°rios (User-Item Matrix)
user_ratings = pd.DataFrame({
    "user": ["User1", "User2", "User3", "User4", "User5"],
    "vajY3r1wAMk": [5, 4, 4, 2, 1],
    "vajY3r1wAMk": [3, 5, 2, 1, 0],
    "vajY3r1wAMk": [4, 0, 3, 5, 2],
    "vajY3r1wAMk": [1, 3, 5, 0, 4],
    "jj1GMYDAeyDM": [5, 0, 4, 3, 2],
    "jj1GMYDAeyDM": [0, 2, 3, 5, 4],
    "jj1GMYDAeyDM": [4, 5, 2, 1, 0],
    "jj1GMYDAeyDM": [3, 2, 1, 5, 4],
}).set_index("user")

# Dados de avalia√ß√µes do usu√°rio atual
if "user_feedback" not in st.session_state:
    st.session_state.user_feedback = pd.DataFrame(columns=["video_id", "rating"])

# =================== Interface com Abas ===================
with st.sidebar:
    selected = option_menu(
        menu_title="Menu",
        options=["Aprende Mais - Recomenda√ß√£o de V√≠deos", "Calculadora Verde - Recomenda√ß√£o por Conte√∫do"],
        icons=["play-circle", "tools"],
        menu_icon="cast",
        default_index=0,
    )

# =================== Recomenda√ß√£o de V√≠deos (Filtragem por Conte√∫do) ===================
if selected == "Aprende Mais - Recomenda√ß√£o de V√≠deos":
    st.title("Aprende Mais - Recomendador de V√≠deos por Filtragem por Conte√∫do")
    st.write("Assista aos v√≠deos e avalie-os para receber recomenda√ß√µes personalizadas!")

    
    for video in videos:
        # Cria√ß√£o de colunas: uma para o v√≠deo e outra para o slider e bot√£o
        col1, col2 = st.columns([2, 1])  # Ajuste a propor√ß√£o (2:1) para balancear o espa√ßo

        # V√≠deo na primeira coluna
        with col1:
            st.markdown(f"<div class='small-title'>{video['title']}</div>", unsafe_allow_html=True)
            video_url = f"https://www.youtube.com/embed/{video['id']}"
            st.markdown(
                f"""
                <iframe width="{player_width}" height="{player_height}" 
                src="{video_url}" frameborder="0" allow="accelerometer; autoplay; clipboard-write; 
                encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
                </iframe>
                """,
                unsafe_allow_html=True,
            )

        # Slider e bot√£o na segunda coluna
        with col2:
            rating = st.feedback(
                "stars",
                key=f"slider_{video['id']}"
            )
            if st.button(f"Salvar Avalia√ß√£o", key=f"save_{video['id']}"):
                # Adiciona avalia√ß√£o ao estado
                new_feedback = pd.DataFrame([{"video_id": video["id"], "rating": rating}])
                st.session_state.user_feedback = pd.concat([st.session_state.user_feedback, new_feedback], ignore_index=True)
                st.success("Avalia√ß√£o salva!")

   

    # Filtragem por conte√∫do
    recommendations = []
    if not st.session_state.user_feedback.empty:
        # Identifica categorias favoritas baseadas em avalia√ß√µes positivas
        liked_categories = st.session_state.user_feedback.merge(
            pd.DataFrame(videos), left_on="video_id", right_on="id"
        )["category"].unique()

        # Busca v√≠deos na base adicional da mesma categoria
        recommendations = [
            video for video in additional_videos if video["category"] in liked_categories
        ]

    # Exibe as recomenda√ß√µes finais
    if recommendations:
        st.write("### Recomenda√ß√µes para voc√™:")
        for video in recommendations:
            st.markdown(f"<div class='recommendation-title'>{video['title']}</div>", unsafe_allow_html=True)
            # Ajuste de v√≠deo com novo tamanho
            video_url = f"https://www.youtube.com/embed/{video['id']}"
            st.markdown(
                f"""
                <iframe class="video-frame" src="{video_url}" frameborder="0" 
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                allowfullscreen>
                </iframe>
                """,
                unsafe_allow_html=True,
            )
    else:
        st.write("### Nenhuma recomenda√ß√£o dispon√≠vel. Avalie mais v√≠deos para receber sugest√µes!")


if selected == "Calculadora Verde - Recomenda√ß√£o por Conte√∫do":

    # Base de projetos DIY com materiais e quantidades
    projects_diy = [
        # Pl√°stico
        {
            "project": "Porta-canetas com garrafas PET",
            "materials": {"garrafa PET": 1},
        },
        {
            "project": "Puff com garrafas PET",
            "materials": {"garrafa PET": 20},
        },
        {
            "project": "Vasos para plantas suspensos",
            "materials": {"garrafa PET": 3},
        },
        # Metal
        {
            "project": "Lanternas decorativas com latas de alum√≠nio",
            "materials": {"lata de alum√≠nio": 2},
        },
        {
            "project": "Porta-trecos com latas de conserva",
            "materials": {"lata de conserva": 3},
        },
        {
            "project": "Mini fogareiro com latas de alum√≠nio",
            "materials": {"lata de alum√≠nio": 2},
        },
        # Papel e Papel√£o
        {
            "project": "Organizador de mesa com rolos de papel higi√™nico",
            "materials": {"rolo de papel higi√™nico": 5, "caixa de papel√£o": 1},
        },
        {
            "project": "M√≥veis de papel√£o (banquinho ou mesinha)",
            "materials": {"caixa de papel√£o": 10},
        },
        {
            "project": "Lumin√°ria com tiras de papel",
            "materials": {"tiras de papel": 20},
        },
        # Vidro
        {
            "project": "Vasos decorativos com potes de vidro",
            "materials": {"pote de vidro": 3},
        },
        {
            "project": "Casti√ßais com frascos de vidro",
            "materials": {"frasco de vidro": 2},
        },
        {
            "project": "Lumin√°ria com garrafas de vidro",
            "materials": {"garrafa de vidro": 1},
        },
    ]

    # =================== Recomenda√ß√£o por Conte√∫do ===================
    st.title("Calculadora Verde - Recomenda√ß√£o por Conte√∫do de Projetos DIY")
    st.write("Selecione o material e informe a quantidade dispon√≠vel para receber recomenda√ß√µes de projetos DIY!")

    # Entrada do material e quantidade
    material_category = st.selectbox(
        "Selecione o material dispon√≠vel:",
        options=["Pl√°stico", "Metal", "Papel e Papel√£o", "Vidro"],
    )

    material_quantity = st.number_input("Informe a quantidade dispon√≠vel:", min_value=1, step=1)

    # Mapeia a categoria de materiais para os nomes espec√≠ficos usados nos projetos
    material_mapping = {
        "Pl√°stico": ["garrafa PET"],
        "Metal": ["lata de alum√≠nio", "lata de conserva"],
        "Papel e Papel√£o": ["rolo de papel higi√™nico", "caixa de papel√£o", "tiras de papel"],
        "Vidro": ["pote de vidro", "frasco de vidro", "garrafa de vidro"],
    }

    # Processa a entrada do usu√°rio e filtra projetos
    if st.button("Buscar Projetos"):
        relevant_materials = material_mapping.get(material_category, [])
        recommended_projects = [
            project
            for project in projects_diy
            for material in relevant_materials
            if material in project["materials"] and project["materials"][material] <= material_quantity
        ]

        if recommended_projects:
            st.write("### Projetos recomendados:")
            for project in recommended_projects:
                st.subheader(project["project"])
                st.write("Materiais necess√°rios:")
                for material, quantity in project["materials"].items():
                    st.write(f"- {quantity}x {material.capitalize()}")
        else:
            st.warning("Nenhum projeto encontrado para os materiais e quantidades informados.")